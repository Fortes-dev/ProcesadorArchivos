/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.procesadorarchivos;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;

/**
 *
 * @author CarlosFortesMedina
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Variables para trabajar en el programa
     */
    private String archivo;
    private String textoArchivo;
    private String textoHistograma;
    
    /**
     * Contador para crear copias en el método guardar
     */
    private int contador = 1;
    
    /**
     * Variable HashMap donde guardamos el histograma
     */
    HashMap<String, Integer> hist = new HashMap<>();
    
    /**
     * Variables de tipo file 
     */
    private File fileTexto;
    private File fileHistograma;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuCargar = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuOpciones = new javax.swing.JMenu();
        menuHistograma = new javax.swing.JMenuItem();
        menuTexto = new javax.swing.JMenuItem();
        menuInfo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 700));

        jPanel1.setLayout(new java.awt.BorderLayout());

        texto.setColumns(20);
        texto.setRows(5);
        jScrollPane1.setViewportView(texto);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        menuFile.setText("Archivo");

        menuCargar.setText("Cargar");
        menuCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarActionPerformed(evt);
            }
        });
        menuFile.add(menuCargar);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuFile.add(menuGuardar);

        jMenuBar1.add(menuFile);

        menuOpciones.setText("Opciones");

        menuHistograma.setText("Mostrar histograma");
        menuHistograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHistogramaActionPerformed(evt);
            }
        });
        menuOpciones.add(menuHistograma);

        menuTexto.setText("Mostrar texto");
        menuTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTextoActionPerformed(evt);
            }
        });
        menuOpciones.add(menuTexto);

        menuInfo.setText("Info");
        menuInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfoActionPerformed(evt);
            }
        });
        menuOpciones.add(menuInfo);
        menuOpciones.add(jSeparator1);

        menuSalir.setText("Salir");
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        menuOpciones.add(menuSalir);

        jMenuBar1.add(menuOpciones);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para cargar el archivo
     *
     * @param evt
     */
    private void menuCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarActionPerformed
        textoArchivo = "";
        archivo = JOptionPane.showInputDialog(rootPane, "Inserte el nombre del archivo");

        fileTexto = new File(archivo);

        try ( BufferedReader f = new BufferedReader(new FileReader(fileTexto))) {
            String s;
            while ((s = f.readLine()) != null) {
                textoArchivo += s + "\n";
            }

        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }

        generarHistograma();

        texto.setText(textoArchivo);

    }//GEN-LAST:event_menuCargarActionPerformed
    /**
     * Método para escribir un archivo csv(histograma)
     *
     * @param Filefw Párametro FileWriter
     */
    private void escribirHistograma(FileWriter Filefw) {
        try ( CSVPrinter printer = new CSVPrinter(Filefw, CSVFormat.DEFAULT.withHeader("Palabras", "Valores"))) {

            hist.forEach((palabra, valor) -> {

                try {
                    printer.printRecord(palabra, valor);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Método para generar un histograma y guardarlo en un HashMap
     */
    private void generarHistograma() {
        hist.clear();
        String archivoFormat = textoArchivo.replaceAll("[^a-zA-Z0-9á-úÁ-ÚñÑ ]", " ");       // Expresion regular para cambiar todos los caracteres que no sean
        String[] palabras = archivoFormat.toLowerCase(Locale.ROOT).split(" ");              // letras numeros o letras con tildes junto con la ñ
        for (String palabra
                : palabras) {
            if (palabra.length() > 2) {
                if (!hist.containsKey(palabra)) {
                    hist.put(palabra, 1);
                } else {
                    hist.replace(palabra, hist.get(palabra), hist.get(palabra) + 1);
                }
            }
        }
    }

    /**
     * Método para guardar un archivo previamente cargado, con una nueva
     * extensión Permite guardar copias.
     *
     * @param evt
     */
    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed

        fileHistograma = new File(fileTexto.getName().replace(".txt", "") + "_histograma.csv");
        FileWriter fw = null;
        if (!fileHistograma.exists()) {
            try {
                fw = new FileWriter(fileHistograma);

            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
            escribirHistograma(fw);
            JOptionPane.showMessageDialog(rootPane, "El archivo se ha guardado! :)");
        } else {
            int op = JOptionPane.showConfirmDialog(rootPane, "El archivo ya existe, desea crear una copia?", "Oops ha ocurrido un error", WIDTH);
            if (op == JOptionPane.YES_OPTION) {
                fileHistograma = new File(fileTexto.getName().replace(".txt", "") + "(copia)" + contador + "_histograma.csv");
                fw = null;
                try {
                    fw = new FileWriter(fileHistograma);

                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }

                escribirHistograma(fw);

                contador++;
            }
        }

    }//GEN-LAST:event_menuGuardarActionPerformed

    /**
     * Método para salir del programa
     *
     * @param evt
     */
    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuSalirActionPerformed

    /**
     * Método para recibir información del autor
     *
     * @param evt
     */
    private void menuInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfoActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Tarea realizada by Carlos Fortes Medina", "Procesador de Archivos", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuInfoActionPerformed

    /**
     * Método para mostrar el contenido del archivo cargado en el frame
     *
     * @param evt
     */
    private void menuTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTextoActionPerformed
        textoArchivo = "";
        try ( BufferedReader f = new BufferedReader(new FileReader(archivo))) {
            String s;
            while ((s = f.readLine()) != null) {
                textoArchivo += s + "\n";
            }

        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
        texto.setText(textoArchivo);
    }//GEN-LAST:event_menuTextoActionPerformed

    /**
     * Método para mostrar el histograma en el frame.
     *
     * @param evt
     */
    private void menuHistogramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHistogramaActionPerformed

        textoHistograma = "Palabra | Valor\n";
        for (String clave : hist.keySet()) {
            int valor = hist.get(clave);
            textoHistograma += clave + " | " + valor + "\n";
        }

        texto.setText(textoHistograma);
    }//GEN-LAST:event_menuHistogramaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menuCargar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuHistograma;
    private javax.swing.JMenuItem menuInfo;
    private javax.swing.JMenu menuOpciones;
    private javax.swing.JMenuItem menuSalir;
    private javax.swing.JMenuItem menuTexto;
    private javax.swing.JTextArea texto;
    // End of variables declaration//GEN-END:variables
}
